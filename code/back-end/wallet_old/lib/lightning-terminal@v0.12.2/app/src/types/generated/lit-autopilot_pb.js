/* eslint-disable */
var proto = { litrpc: {} };

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var lit$sessions_pb = require('./lit-sessions_pb.js');
goog.exportSymbol('proto.litrpc.AddAutopilotSessionRequest', null, global);
goog.exportSymbol('proto.litrpc.AddAutopilotSessionResponse', null, global);
goog.exportSymbol('proto.litrpc.Feature', null, global);
goog.exportSymbol('proto.litrpc.FeatureConfig', null, global);
goog.exportSymbol('proto.litrpc.ListAutopilotFeaturesRequest', null, global);
goog.exportSymbol('proto.litrpc.ListAutopilotFeaturesResponse', null, global);
goog.exportSymbol('proto.litrpc.ListAutopilotSessionsRequest', null, global);
goog.exportSymbol('proto.litrpc.ListAutopilotSessionsResponse', null, global);
goog.exportSymbol('proto.litrpc.Permissions', null, global);
goog.exportSymbol('proto.litrpc.RevokeAutopilotSessionRequest', null, global);
goog.exportSymbol('proto.litrpc.RevokeAutopilotSessionResponse', null, global);
goog.exportSymbol('proto.litrpc.RuleValues', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.AddAutopilotSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.AddAutopilotSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.AddAutopilotSessionRequest.displayName = 'proto.litrpc.AddAutopilotSessionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.AddAutopilotSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.AddAutopilotSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.AddAutopilotSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    expiryTimestampSeconds: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    mailboxServerAddr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    devServer: jspb.Message.getFieldWithDefault(msg, 4, false),
    featuresMap: (f = msg.getFeaturesMap()) ? f.toObject(includeInstance, proto.litrpc.FeatureConfig.toObject) : [],
    sessionRules: (f = msg.getSessionRules()) && lit$sessions_pb.RulesMap.toObject(includeInstance, f),
    noPrivacyMapper: jspb.Message.getFieldWithDefault(msg, 7, false),
    linkedGroupId: msg.getLinkedGroupId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.AddAutopilotSessionRequest}
 */
proto.litrpc.AddAutopilotSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.AddAutopilotSessionRequest;
  return proto.litrpc.AddAutopilotSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.AddAutopilotSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.AddAutopilotSessionRequest}
 */
proto.litrpc.AddAutopilotSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setExpiryTimestampSeconds(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMailboxServerAddr(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDevServer(value);
      break;
    case 5:
      var value = msg.getFeaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.litrpc.FeatureConfig.deserializeBinaryFromReader, "");
         });
      break;
    case 6:
      var value = new lit$sessions_pb.RulesMap;
      reader.readMessage(value,lit$sessions_pb.RulesMap.deserializeBinaryFromReader);
      msg.setSessionRules(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNoPrivacyMapper(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLinkedGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.AddAutopilotSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.AddAutopilotSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.AddAutopilotSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExpiryTimestampSeconds();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getMailboxServerAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDevServer();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getFeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(5, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.litrpc.FeatureConfig.serializeBinaryToWriter);
  }
  f = message.getSessionRules();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      lit$sessions_pb.RulesMap.serializeBinaryToWriter
    );
  }
  f = message.getNoPrivacyMapper();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLinkedGroupId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 expiry_timestamp_seconds = 2;
 * @return {string}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getExpiryTimestampSeconds = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setExpiryTimestampSeconds = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional string mailbox_server_addr = 3;
 * @return {string}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getMailboxServerAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setMailboxServerAddr = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool dev_server = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getDevServer = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setDevServer = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * map<string, FeatureConfig> features = 5;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.litrpc.FeatureConfig>}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getFeaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.litrpc.FeatureConfig>} */ (
      jspb.Message.getMapField(this, 5, opt_noLazyCreate,
      proto.litrpc.FeatureConfig));
};


proto.litrpc.AddAutopilotSessionRequest.prototype.clearFeaturesMap = function() {
  this.getFeaturesMap().clear();
};


/**
 * optional RulesMap session_rules = 6;
 * @return {?proto.litrpc.RulesMap}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getSessionRules = function() {
  return /** @type{?proto.litrpc.RulesMap} */ (
    jspb.Message.getWrapperField(this, lit$sessions_pb.RulesMap, 6));
};


/** @param {?proto.litrpc.RulesMap|undefined} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setSessionRules = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.litrpc.AddAutopilotSessionRequest.prototype.clearSessionRules = function() {
  this.setSessionRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.hasSessionRules = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool no_privacy_mapper = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getNoPrivacyMapper = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setNoPrivacyMapper = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bytes linked_group_id = 8;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getLinkedGroupId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes linked_group_id = 8;
 * This is a type-conversion wrapper around `getLinkedGroupId()`
 * @return {string}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getLinkedGroupId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLinkedGroupId()));
};


/**
 * optional bytes linked_group_id = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLinkedGroupId()`
 * @return {!Uint8Array}
 */
proto.litrpc.AddAutopilotSessionRequest.prototype.getLinkedGroupId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLinkedGroupId()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.AddAutopilotSessionRequest.prototype.setLinkedGroupId = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.FeatureConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.FeatureConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.FeatureConfig.displayName = 'proto.litrpc.FeatureConfig';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.FeatureConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.FeatureConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.FeatureConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.FeatureConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    rules: (f = msg.getRules()) && lit$sessions_pb.RulesMap.toObject(includeInstance, f),
    config: msg.getConfig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.FeatureConfig}
 */
proto.litrpc.FeatureConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.FeatureConfig;
  return proto.litrpc.FeatureConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.FeatureConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.FeatureConfig}
 */
proto.litrpc.FeatureConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lit$sessions_pb.RulesMap;
      reader.readMessage(value,lit$sessions_pb.RulesMap.deserializeBinaryFromReader);
      msg.setRules(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.FeatureConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.FeatureConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.FeatureConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.FeatureConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRules();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lit$sessions_pb.RulesMap.serializeBinaryToWriter
    );
  }
  f = message.getConfig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional RulesMap rules = 1;
 * @return {?proto.litrpc.RulesMap}
 */
proto.litrpc.FeatureConfig.prototype.getRules = function() {
  return /** @type{?proto.litrpc.RulesMap} */ (
    jspb.Message.getWrapperField(this, lit$sessions_pb.RulesMap, 1));
};


/** @param {?proto.litrpc.RulesMap|undefined} value */
proto.litrpc.FeatureConfig.prototype.setRules = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.litrpc.FeatureConfig.prototype.clearRules = function() {
  this.setRules(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.litrpc.FeatureConfig.prototype.hasRules = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes config = 2;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.FeatureConfig.prototype.getConfig = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes config = 2;
 * This is a type-conversion wrapper around `getConfig()`
 * @return {string}
 */
proto.litrpc.FeatureConfig.prototype.getConfig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConfig()));
};


/**
 * optional bytes config = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConfig()`
 * @return {!Uint8Array}
 */
proto.litrpc.FeatureConfig.prototype.getConfig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConfig()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.FeatureConfig.prototype.setConfig = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.ListAutopilotSessionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.ListAutopilotSessionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.ListAutopilotSessionsRequest.displayName = 'proto.litrpc.ListAutopilotSessionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.ListAutopilotSessionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.ListAutopilotSessionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.ListAutopilotSessionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotSessionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.ListAutopilotSessionsRequest}
 */
proto.litrpc.ListAutopilotSessionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.ListAutopilotSessionsRequest;
  return proto.litrpc.ListAutopilotSessionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.ListAutopilotSessionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.ListAutopilotSessionsRequest}
 */
proto.litrpc.ListAutopilotSessionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.ListAutopilotSessionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.ListAutopilotSessionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.ListAutopilotSessionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotSessionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.ListAutopilotSessionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.litrpc.ListAutopilotSessionsResponse.repeatedFields_, null);
};
goog.inherits(proto.litrpc.ListAutopilotSessionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.ListAutopilotSessionsResponse.displayName = 'proto.litrpc.ListAutopilotSessionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.litrpc.ListAutopilotSessionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.ListAutopilotSessionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.ListAutopilotSessionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.ListAutopilotSessionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotSessionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionsList: jspb.Message.toObjectList(msg.getSessionsList(),
    lit$sessions_pb.Session.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.ListAutopilotSessionsResponse}
 */
proto.litrpc.ListAutopilotSessionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.ListAutopilotSessionsResponse;
  return proto.litrpc.ListAutopilotSessionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.ListAutopilotSessionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.ListAutopilotSessionsResponse}
 */
proto.litrpc.ListAutopilotSessionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lit$sessions_pb.Session;
      reader.readMessage(value,lit$sessions_pb.Session.deserializeBinaryFromReader);
      msg.addSessions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.ListAutopilotSessionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.ListAutopilotSessionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.ListAutopilotSessionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotSessionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      lit$sessions_pb.Session.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Session sessions = 1;
 * @return {!Array<!proto.litrpc.Session>}
 */
proto.litrpc.ListAutopilotSessionsResponse.prototype.getSessionsList = function() {
  return /** @type{!Array<!proto.litrpc.Session>} */ (
    jspb.Message.getRepeatedWrapperField(this, lit$sessions_pb.Session, 1));
};


/** @param {!Array<!proto.litrpc.Session>} value */
proto.litrpc.ListAutopilotSessionsResponse.prototype.setSessionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.litrpc.Session=} opt_value
 * @param {number=} opt_index
 * @return {!proto.litrpc.Session}
 */
proto.litrpc.ListAutopilotSessionsResponse.prototype.addSessions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.litrpc.Session, opt_index);
};


proto.litrpc.ListAutopilotSessionsResponse.prototype.clearSessionsList = function() {
  this.setSessionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.AddAutopilotSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.AddAutopilotSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.AddAutopilotSessionResponse.displayName = 'proto.litrpc.AddAutopilotSessionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.AddAutopilotSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.AddAutopilotSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.AddAutopilotSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.AddAutopilotSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    session: (f = msg.getSession()) && lit$sessions_pb.Session.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.AddAutopilotSessionResponse}
 */
proto.litrpc.AddAutopilotSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.AddAutopilotSessionResponse;
  return proto.litrpc.AddAutopilotSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.AddAutopilotSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.AddAutopilotSessionResponse}
 */
proto.litrpc.AddAutopilotSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lit$sessions_pb.Session;
      reader.readMessage(value,lit$sessions_pb.Session.deserializeBinaryFromReader);
      msg.setSession(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.AddAutopilotSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.AddAutopilotSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.AddAutopilotSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.AddAutopilotSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSession();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lit$sessions_pb.Session.serializeBinaryToWriter
    );
  }
};


/**
 * optional Session session = 1;
 * @return {?proto.litrpc.Session}
 */
proto.litrpc.AddAutopilotSessionResponse.prototype.getSession = function() {
  return /** @type{?proto.litrpc.Session} */ (
    jspb.Message.getWrapperField(this, lit$sessions_pb.Session, 1));
};


/** @param {?proto.litrpc.Session|undefined} value */
proto.litrpc.AddAutopilotSessionResponse.prototype.setSession = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.litrpc.AddAutopilotSessionResponse.prototype.clearSession = function() {
  this.setSession(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.litrpc.AddAutopilotSessionResponse.prototype.hasSession = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.ListAutopilotFeaturesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.ListAutopilotFeaturesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.ListAutopilotFeaturesRequest.displayName = 'proto.litrpc.ListAutopilotFeaturesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.ListAutopilotFeaturesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.ListAutopilotFeaturesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.ListAutopilotFeaturesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotFeaturesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.ListAutopilotFeaturesRequest}
 */
proto.litrpc.ListAutopilotFeaturesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.ListAutopilotFeaturesRequest;
  return proto.litrpc.ListAutopilotFeaturesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.ListAutopilotFeaturesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.ListAutopilotFeaturesRequest}
 */
proto.litrpc.ListAutopilotFeaturesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.ListAutopilotFeaturesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.ListAutopilotFeaturesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.ListAutopilotFeaturesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotFeaturesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.ListAutopilotFeaturesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.ListAutopilotFeaturesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.ListAutopilotFeaturesResponse.displayName = 'proto.litrpc.ListAutopilotFeaturesResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.ListAutopilotFeaturesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.ListAutopilotFeaturesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.ListAutopilotFeaturesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotFeaturesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    featuresMap: (f = msg.getFeaturesMap()) ? f.toObject(includeInstance, proto.litrpc.Feature.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.ListAutopilotFeaturesResponse}
 */
proto.litrpc.ListAutopilotFeaturesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.ListAutopilotFeaturesResponse;
  return proto.litrpc.ListAutopilotFeaturesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.ListAutopilotFeaturesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.ListAutopilotFeaturesResponse}
 */
proto.litrpc.ListAutopilotFeaturesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getFeaturesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.litrpc.Feature.deserializeBinaryFromReader, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.ListAutopilotFeaturesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.ListAutopilotFeaturesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.ListAutopilotFeaturesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListAutopilotFeaturesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeaturesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.litrpc.Feature.serializeBinaryToWriter);
  }
};


/**
 * map<string, Feature> features = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.litrpc.Feature>}
 */
proto.litrpc.ListAutopilotFeaturesResponse.prototype.getFeaturesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.litrpc.Feature>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.litrpc.Feature));
};


proto.litrpc.ListAutopilotFeaturesResponse.prototype.clearFeaturesMap = function() {
  this.getFeaturesMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.RevokeAutopilotSessionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.RevokeAutopilotSessionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.RevokeAutopilotSessionRequest.displayName = 'proto.litrpc.RevokeAutopilotSessionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.RevokeAutopilotSessionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.RevokeAutopilotSessionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.RevokeAutopilotSessionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.RevokeAutopilotSessionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    localPublicKey: msg.getLocalPublicKey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.RevokeAutopilotSessionRequest}
 */
proto.litrpc.RevokeAutopilotSessionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.RevokeAutopilotSessionRequest;
  return proto.litrpc.RevokeAutopilotSessionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.RevokeAutopilotSessionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.RevokeAutopilotSessionRequest}
 */
proto.litrpc.RevokeAutopilotSessionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLocalPublicKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.RevokeAutopilotSessionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.RevokeAutopilotSessionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.RevokeAutopilotSessionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.RevokeAutopilotSessionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocalPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes local_public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.RevokeAutopilotSessionRequest.prototype.getLocalPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes local_public_key = 1;
 * This is a type-conversion wrapper around `getLocalPublicKey()`
 * @return {string}
 */
proto.litrpc.RevokeAutopilotSessionRequest.prototype.getLocalPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLocalPublicKey()));
};


/**
 * optional bytes local_public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLocalPublicKey()`
 * @return {!Uint8Array}
 */
proto.litrpc.RevokeAutopilotSessionRequest.prototype.getLocalPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLocalPublicKey()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.RevokeAutopilotSessionRequest.prototype.setLocalPublicKey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.RevokeAutopilotSessionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.RevokeAutopilotSessionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.RevokeAutopilotSessionResponse.displayName = 'proto.litrpc.RevokeAutopilotSessionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.RevokeAutopilotSessionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.RevokeAutopilotSessionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.RevokeAutopilotSessionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.RevokeAutopilotSessionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.RevokeAutopilotSessionResponse}
 */
proto.litrpc.RevokeAutopilotSessionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.RevokeAutopilotSessionResponse;
  return proto.litrpc.RevokeAutopilotSessionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.RevokeAutopilotSessionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.RevokeAutopilotSessionResponse}
 */
proto.litrpc.RevokeAutopilotSessionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.RevokeAutopilotSessionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.RevokeAutopilotSessionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.RevokeAutopilotSessionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.RevokeAutopilotSessionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.Feature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.litrpc.Feature.repeatedFields_, null);
};
goog.inherits(proto.litrpc.Feature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.Feature.displayName = 'proto.litrpc.Feature';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.litrpc.Feature.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.Feature.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.Feature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.Feature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.Feature.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    rulesMap: (f = msg.getRulesMap()) ? f.toObject(includeInstance, proto.litrpc.RuleValues.toObject) : [],
    permissionsListList: jspb.Message.toObjectList(msg.getPermissionsListList(),
    proto.litrpc.Permissions.toObject, includeInstance),
    requiresUpgrade: jspb.Message.getFieldWithDefault(msg, 5, false),
    defaultConfig: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.Feature}
 */
proto.litrpc.Feature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.Feature;
  return proto.litrpc.Feature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.Feature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.Feature}
 */
proto.litrpc.Feature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = msg.getRulesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.litrpc.RuleValues.deserializeBinaryFromReader, "");
         });
      break;
    case 4:
      var value = new proto.litrpc.Permissions;
      reader.readMessage(value,proto.litrpc.Permissions.deserializeBinaryFromReader);
      msg.addPermissionsList(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequiresUpgrade(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefaultConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.Feature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.Feature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.Feature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.Feature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRulesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.litrpc.RuleValues.serializeBinaryToWriter);
  }
  f = message.getPermissionsListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.litrpc.Permissions.serializeBinaryToWriter
    );
  }
  f = message.getRequiresUpgrade();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getDefaultConfig();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.litrpc.Feature.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.litrpc.Feature.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.litrpc.Feature.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.litrpc.Feature.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, RuleValues> rules = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.litrpc.RuleValues>}
 */
proto.litrpc.Feature.prototype.getRulesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.litrpc.RuleValues>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.litrpc.RuleValues));
};


proto.litrpc.Feature.prototype.clearRulesMap = function() {
  this.getRulesMap().clear();
};


/**
 * repeated Permissions permissions_list = 4;
 * @return {!Array<!proto.litrpc.Permissions>}
 */
proto.litrpc.Feature.prototype.getPermissionsListList = function() {
  return /** @type{!Array<!proto.litrpc.Permissions>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.litrpc.Permissions, 4));
};


/** @param {!Array<!proto.litrpc.Permissions>} value */
proto.litrpc.Feature.prototype.setPermissionsListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.litrpc.Permissions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.litrpc.Permissions}
 */
proto.litrpc.Feature.prototype.addPermissionsList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.litrpc.Permissions, opt_index);
};


proto.litrpc.Feature.prototype.clearPermissionsListList = function() {
  this.setPermissionsListList([]);
};


/**
 * optional bool requires_upgrade = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.Feature.prototype.getRequiresUpgrade = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.litrpc.Feature.prototype.setRequiresUpgrade = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string default_config = 6;
 * @return {string}
 */
proto.litrpc.Feature.prototype.getDefaultConfig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.litrpc.Feature.prototype.setDefaultConfig = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.RuleValues = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.RuleValues, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.RuleValues.displayName = 'proto.litrpc.RuleValues';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.RuleValues.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.RuleValues.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.RuleValues} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.RuleValues.toObject = function(includeInstance, msg) {
  var f, obj = {
    known: jspb.Message.getFieldWithDefault(msg, 1, false),
    defaults: (f = msg.getDefaults()) && lit$sessions_pb.RuleValue.toObject(includeInstance, f),
    minValue: (f = msg.getMinValue()) && lit$sessions_pb.RuleValue.toObject(includeInstance, f),
    maxValue: (f = msg.getMaxValue()) && lit$sessions_pb.RuleValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.RuleValues}
 */
proto.litrpc.RuleValues.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.RuleValues;
  return proto.litrpc.RuleValues.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.RuleValues} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.RuleValues}
 */
proto.litrpc.RuleValues.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKnown(value);
      break;
    case 2:
      var value = new lit$sessions_pb.RuleValue;
      reader.readMessage(value,lit$sessions_pb.RuleValue.deserializeBinaryFromReader);
      msg.setDefaults(value);
      break;
    case 3:
      var value = new lit$sessions_pb.RuleValue;
      reader.readMessage(value,lit$sessions_pb.RuleValue.deserializeBinaryFromReader);
      msg.setMinValue(value);
      break;
    case 4:
      var value = new lit$sessions_pb.RuleValue;
      reader.readMessage(value,lit$sessions_pb.RuleValue.deserializeBinaryFromReader);
      msg.setMaxValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.RuleValues.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.RuleValues.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.RuleValues} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.RuleValues.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKnown();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getDefaults();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lit$sessions_pb.RuleValue.serializeBinaryToWriter
    );
  }
  f = message.getMinValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lit$sessions_pb.RuleValue.serializeBinaryToWriter
    );
  }
  f = message.getMaxValue();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      lit$sessions_pb.RuleValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool known = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.RuleValues.prototype.getKnown = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.litrpc.RuleValues.prototype.setKnown = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional RuleValue defaults = 2;
 * @return {?proto.litrpc.RuleValue}
 */
proto.litrpc.RuleValues.prototype.getDefaults = function() {
  return /** @type{?proto.litrpc.RuleValue} */ (
    jspb.Message.getWrapperField(this, lit$sessions_pb.RuleValue, 2));
};


/** @param {?proto.litrpc.RuleValue|undefined} value */
proto.litrpc.RuleValues.prototype.setDefaults = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.litrpc.RuleValues.prototype.clearDefaults = function() {
  this.setDefaults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.litrpc.RuleValues.prototype.hasDefaults = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RuleValue min_value = 3;
 * @return {?proto.litrpc.RuleValue}
 */
proto.litrpc.RuleValues.prototype.getMinValue = function() {
  return /** @type{?proto.litrpc.RuleValue} */ (
    jspb.Message.getWrapperField(this, lit$sessions_pb.RuleValue, 3));
};


/** @param {?proto.litrpc.RuleValue|undefined} value */
proto.litrpc.RuleValues.prototype.setMinValue = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.litrpc.RuleValues.prototype.clearMinValue = function() {
  this.setMinValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.litrpc.RuleValues.prototype.hasMinValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional RuleValue max_value = 4;
 * @return {?proto.litrpc.RuleValue}
 */
proto.litrpc.RuleValues.prototype.getMaxValue = function() {
  return /** @type{?proto.litrpc.RuleValue} */ (
    jspb.Message.getWrapperField(this, lit$sessions_pb.RuleValue, 4));
};


/** @param {?proto.litrpc.RuleValue|undefined} value */
proto.litrpc.RuleValues.prototype.setMaxValue = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.litrpc.RuleValues.prototype.clearMaxValue = function() {
  this.setMaxValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.litrpc.RuleValues.prototype.hasMaxValue = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.Permissions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.litrpc.Permissions.repeatedFields_, null);
};
goog.inherits(proto.litrpc.Permissions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.Permissions.displayName = 'proto.litrpc.Permissions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.litrpc.Permissions.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.Permissions.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.Permissions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.Permissions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.Permissions.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getFieldWithDefault(msg, 1, ""),
    operationsList: jspb.Message.toObjectList(msg.getOperationsList(),
    lit$sessions_pb.MacaroonPermission.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.Permissions}
 */
proto.litrpc.Permissions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.Permissions;
  return proto.litrpc.Permissions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.Permissions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.Permissions}
 */
proto.litrpc.Permissions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = new lit$sessions_pb.MacaroonPermission;
      reader.readMessage(value,lit$sessions_pb.MacaroonPermission.deserializeBinaryFromReader);
      msg.addOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.Permissions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.Permissions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.Permissions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.Permissions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMethod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      lit$sessions_pb.MacaroonPermission.serializeBinaryToWriter
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.litrpc.Permissions.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.litrpc.Permissions.prototype.setMethod = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated MacaroonPermission operations = 2;
 * @return {!Array<!proto.litrpc.MacaroonPermission>}
 */
proto.litrpc.Permissions.prototype.getOperationsList = function() {
  return /** @type{!Array<!proto.litrpc.MacaroonPermission>} */ (
    jspb.Message.getRepeatedWrapperField(this, lit$sessions_pb.MacaroonPermission, 2));
};


/** @param {!Array<!proto.litrpc.MacaroonPermission>} value */
proto.litrpc.Permissions.prototype.setOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.litrpc.MacaroonPermission=} opt_value
 * @param {number=} opt_index
 * @return {!proto.litrpc.MacaroonPermission}
 */
proto.litrpc.Permissions.prototype.addOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.litrpc.MacaroonPermission, opt_index);
};


proto.litrpc.Permissions.prototype.clearOperationsList = function() {
  this.setOperationsList([]);
};


goog.object.extend(exports, proto.litrpc);
