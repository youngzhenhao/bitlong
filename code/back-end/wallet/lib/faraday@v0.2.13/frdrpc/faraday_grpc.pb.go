// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package frdrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaradayServerClient is the client API for FaradayServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaradayServerClient interface {
	// * frcli: `outliers`
	// Get close recommendations for currently open channels based on whether it is
	// an outlier.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/outliers/REVENUE?rec_request.minimum_monitored=123
	OutlierRecommendations(ctx context.Context, in *OutlierRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error)
	// * frcli: `threshold`
	// Get close recommendations for currently open channels based whether they are
	// below a set threshold.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/threshold/UPTIME?rec_request.minimum_monitored=123
	ThresholdRecommendations(ctx context.Context, in *ThresholdRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error)
	// * frcli: `revenue`
	// Get a pairwise revenue report for a channel.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/revenue
	RevenueReport(ctx context.Context, in *RevenueReportRequest, opts ...grpc.CallOption) (*RevenueReportResponse, error)
	// * frcli: `insights`
	// List currently open channel with routing and uptime information.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/insights
	ChannelInsights(ctx context.Context, in *ChannelInsightsRequest, opts ...grpc.CallOption) (*ChannelInsightsResponse, error)
	// * frcli:
	// Get fiat prices for btc.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/exchangerate
	ExchangeRate(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateResponse, error)
	// *
	// Get a report of your node's activity over a period.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/nodeaudit
	NodeAudit(ctx context.Context, in *NodeAuditRequest, opts ...grpc.CallOption) (*NodeAuditResponse, error)
	// *
	// Get a channel close report for a specific channel.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/closereport
	CloseReport(ctx context.Context, in *CloseReportRequest, opts ...grpc.CallOption) (*CloseReportResponse, error)
}

type faradayServerClient struct {
	cc grpc.ClientConnInterface
}

func NewFaradayServerClient(cc grpc.ClientConnInterface) FaradayServerClient {
	return &faradayServerClient{cc}
}

func (c *faradayServerClient) OutlierRecommendations(ctx context.Context, in *OutlierRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error) {
	out := new(CloseRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/OutlierRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) ThresholdRecommendations(ctx context.Context, in *ThresholdRecommendationsRequest, opts ...grpc.CallOption) (*CloseRecommendationsResponse, error) {
	out := new(CloseRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/ThresholdRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) RevenueReport(ctx context.Context, in *RevenueReportRequest, opts ...grpc.CallOption) (*RevenueReportResponse, error) {
	out := new(RevenueReportResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/RevenueReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) ChannelInsights(ctx context.Context, in *ChannelInsightsRequest, opts ...grpc.CallOption) (*ChannelInsightsResponse, error) {
	out := new(ChannelInsightsResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/ChannelInsights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) ExchangeRate(ctx context.Context, in *ExchangeRateRequest, opts ...grpc.CallOption) (*ExchangeRateResponse, error) {
	out := new(ExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/ExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) NodeAudit(ctx context.Context, in *NodeAuditRequest, opts ...grpc.CallOption) (*NodeAuditResponse, error) {
	out := new(NodeAuditResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/NodeAudit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faradayServerClient) CloseReport(ctx context.Context, in *CloseReportRequest, opts ...grpc.CallOption) (*CloseReportResponse, error) {
	out := new(CloseReportResponse)
	err := c.cc.Invoke(ctx, "/frdrpc.FaradayServer/CloseReport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaradayServerServer is the server API for FaradayServer service.
// All implementations must embed UnimplementedFaradayServerServer
// for forward compatibility
type FaradayServerServer interface {
	// * frcli: `outliers`
	// Get close recommendations for currently open channels based on whether it is
	// an outlier.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/outliers/REVENUE?rec_request.minimum_monitored=123
	OutlierRecommendations(context.Context, *OutlierRecommendationsRequest) (*CloseRecommendationsResponse, error)
	// * frcli: `threshold`
	// Get close recommendations for currently open channels based whether they are
	// below a set threshold.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/threshold/UPTIME?rec_request.minimum_monitored=123
	ThresholdRecommendations(context.Context, *ThresholdRecommendationsRequest) (*CloseRecommendationsResponse, error)
	// * frcli: `revenue`
	// Get a pairwise revenue report for a channel.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/revenue
	RevenueReport(context.Context, *RevenueReportRequest) (*RevenueReportResponse, error)
	// * frcli: `insights`
	// List currently open channel with routing and uptime information.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/insights
	ChannelInsights(context.Context, *ChannelInsightsRequest) (*ChannelInsightsResponse, error)
	// * frcli:
	// Get fiat prices for btc.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/exchangerate
	ExchangeRate(context.Context, *ExchangeRateRequest) (*ExchangeRateResponse, error)
	// *
	// Get a report of your node's activity over a period.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/nodeaudit
	NodeAudit(context.Context, *NodeAuditRequest) (*NodeAuditResponse, error)
	// *
	// Get a channel close report for a specific channel.
	//
	// Example request:
	// http://localhost:8466/v1/faraday/closereport
	CloseReport(context.Context, *CloseReportRequest) (*CloseReportResponse, error)
	mustEmbedUnimplementedFaradayServerServer()
}

// UnimplementedFaradayServerServer must be embedded to have forward compatible implementations.
type UnimplementedFaradayServerServer struct {
}

func (UnimplementedFaradayServerServer) OutlierRecommendations(context.Context, *OutlierRecommendationsRequest) (*CloseRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutlierRecommendations not implemented")
}
func (UnimplementedFaradayServerServer) ThresholdRecommendations(context.Context, *ThresholdRecommendationsRequest) (*CloseRecommendationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThresholdRecommendations not implemented")
}
func (UnimplementedFaradayServerServer) RevenueReport(context.Context, *RevenueReportRequest) (*RevenueReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevenueReport not implemented")
}
func (UnimplementedFaradayServerServer) ChannelInsights(context.Context, *ChannelInsightsRequest) (*ChannelInsightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelInsights not implemented")
}
func (UnimplementedFaradayServerServer) ExchangeRate(context.Context, *ExchangeRateRequest) (*ExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeRate not implemented")
}
func (UnimplementedFaradayServerServer) NodeAudit(context.Context, *NodeAuditRequest) (*NodeAuditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAudit not implemented")
}
func (UnimplementedFaradayServerServer) CloseReport(context.Context, *CloseReportRequest) (*CloseReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseReport not implemented")
}
func (UnimplementedFaradayServerServer) mustEmbedUnimplementedFaradayServerServer() {}

// UnsafeFaradayServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaradayServerServer will
// result in compilation errors.
type UnsafeFaradayServerServer interface {
	mustEmbedUnimplementedFaradayServerServer()
}

func RegisterFaradayServerServer(s grpc.ServiceRegistrar, srv FaradayServerServer) {
	s.RegisterService(&FaradayServer_ServiceDesc, srv)
}

func _FaradayServer_OutlierRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OutlierRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).OutlierRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/OutlierRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).OutlierRecommendations(ctx, req.(*OutlierRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_ThresholdRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThresholdRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).ThresholdRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/ThresholdRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).ThresholdRecommendations(ctx, req.(*ThresholdRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_RevenueReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevenueReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).RevenueReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/RevenueReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).RevenueReport(ctx, req.(*RevenueReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_ChannelInsights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInsightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).ChannelInsights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/ChannelInsights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).ChannelInsights(ctx, req.(*ChannelInsightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_ExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).ExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/ExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).ExchangeRate(ctx, req.(*ExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_NodeAudit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAuditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).NodeAudit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/NodeAudit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).NodeAudit(ctx, req.(*NodeAuditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaradayServer_CloseReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaradayServerServer).CloseReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/frdrpc.FaradayServer/CloseReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaradayServerServer).CloseReport(ctx, req.(*CloseReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaradayServer_ServiceDesc is the grpc.ServiceDesc for FaradayServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaradayServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "frdrpc.FaradayServer",
	HandlerType: (*FaradayServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OutlierRecommendations",
			Handler:    _FaradayServer_OutlierRecommendations_Handler,
		},
		{
			MethodName: "ThresholdRecommendations",
			Handler:    _FaradayServer_ThresholdRecommendations_Handler,
		},
		{
			MethodName: "RevenueReport",
			Handler:    _FaradayServer_RevenueReport_Handler,
		},
		{
			MethodName: "ChannelInsights",
			Handler:    _FaradayServer_ChannelInsights_Handler,
		},
		{
			MethodName: "ExchangeRate",
			Handler:    _FaradayServer_ExchangeRate_Handler,
		},
		{
			MethodName: "NodeAudit",
			Handler:    _FaradayServer_NodeAudit_Handler,
		},
		{
			MethodName: "CloseReport",
			Handler:    _FaradayServer_CloseReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faraday.proto",
}
