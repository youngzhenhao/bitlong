/* eslint-disable */
var proto = { litrpc: {} };

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.litrpc.Action', null, global);
goog.exportSymbol('proto.litrpc.ActionState', null, global);
goog.exportSymbol('proto.litrpc.ListActionsRequest', null, global);
goog.exportSymbol('proto.litrpc.ListActionsResponse', null, global);
goog.exportSymbol('proto.litrpc.PrivacyMapConversionRequest', null, global);
goog.exportSymbol('proto.litrpc.PrivacyMapConversionResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.PrivacyMapConversionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.PrivacyMapConversionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.PrivacyMapConversionRequest.displayName = 'proto.litrpc.PrivacyMapConversionRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.PrivacyMapConversionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.PrivacyMapConversionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.PrivacyMapConversionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    realToPseudo: jspb.Message.getFieldWithDefault(msg, 1, false),
    sessionId: msg.getSessionId_asB64(),
    input: jspb.Message.getFieldWithDefault(msg, 3, ""),
    groupId: msg.getGroupId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.PrivacyMapConversionRequest}
 */
proto.litrpc.PrivacyMapConversionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.PrivacyMapConversionRequest;
  return proto.litrpc.PrivacyMapConversionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.PrivacyMapConversionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.PrivacyMapConversionRequest}
 */
proto.litrpc.PrivacyMapConversionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRealToPseudo(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInput(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.PrivacyMapConversionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.PrivacyMapConversionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.PrivacyMapConversionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRealToPseudo();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getInput();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGroupId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional bool real_to_pseudo = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getRealToPseudo = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.litrpc.PrivacyMapConversionRequest.prototype.setRealToPseudo = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bytes session_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes session_id = 2;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.PrivacyMapConversionRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string input = 3;
 * @return {string}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getInput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.litrpc.PrivacyMapConversionRequest.prototype.setInput = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes group_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getGroupId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes group_id = 4;
 * This is a type-conversion wrapper around `getGroupId()`
 * @return {string}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getGroupId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupId()));
};


/**
 * optional bytes group_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupId()`
 * @return {!Uint8Array}
 */
proto.litrpc.PrivacyMapConversionRequest.prototype.getGroupId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupId()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.PrivacyMapConversionRequest.prototype.setGroupId = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.PrivacyMapConversionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.PrivacyMapConversionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.PrivacyMapConversionResponse.displayName = 'proto.litrpc.PrivacyMapConversionResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.PrivacyMapConversionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.PrivacyMapConversionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.PrivacyMapConversionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.PrivacyMapConversionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    output: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.PrivacyMapConversionResponse}
 */
proto.litrpc.PrivacyMapConversionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.PrivacyMapConversionResponse;
  return proto.litrpc.PrivacyMapConversionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.PrivacyMapConversionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.PrivacyMapConversionResponse}
 */
proto.litrpc.PrivacyMapConversionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.PrivacyMapConversionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.PrivacyMapConversionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.PrivacyMapConversionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.PrivacyMapConversionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOutput();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string output = 1;
 * @return {string}
 */
proto.litrpc.PrivacyMapConversionResponse.prototype.getOutput = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.litrpc.PrivacyMapConversionResponse.prototype.setOutput = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.ListActionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.ListActionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.ListActionsRequest.displayName = 'proto.litrpc.ListActionsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.ListActionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.ListActionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.ListActionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListActionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    featureName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    actorName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    methodName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0),
    indexOffset: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    maxNumActions: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    reversed: jspb.Message.getFieldWithDefault(msg, 7, false),
    countTotal: jspb.Message.getFieldWithDefault(msg, 8, false),
    sessionId: msg.getSessionId_asB64(),
    startTimestamp: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    endTimestamp: jspb.Message.getFieldWithDefault(msg, 11, "0"),
    groupId: msg.getGroupId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.ListActionsRequest}
 */
proto.litrpc.ListActionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.ListActionsRequest;
  return proto.litrpc.ListActionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.ListActionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.ListActionsRequest}
 */
proto.litrpc.ListActionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodName(value);
      break;
    case 4:
      var value = /** @type {!proto.litrpc.ActionState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setIndexOffset(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMaxNumActions(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReversed(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCountTotal(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setStartTimestamp(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setEndTimestamp(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.ListActionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.ListActionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.ListActionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListActionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeatureName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getActorName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMethodName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getIndexOffset();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = message.getMaxNumActions();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      6,
      f
    );
  }
  f = message.getReversed();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getCountTotal();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getStartTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      10,
      f
    );
  }
  f = message.getEndTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      11,
      f
    );
  }
  f = message.getGroupId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
};


/**
 * optional string feature_name = 1;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getFeatureName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setFeatureName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string actor_name = 2;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getActorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setActorName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string method_name = 3;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getMethodName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setMethodName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional ActionState state = 4;
 * @return {!proto.litrpc.ActionState}
 */
proto.litrpc.ListActionsRequest.prototype.getState = function() {
  return /** @type {!proto.litrpc.ActionState} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.litrpc.ActionState} value */
proto.litrpc.ListActionsRequest.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional uint64 index_offset = 5;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getIndexOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setIndexOffset = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional uint64 max_num_actions = 6;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getMaxNumActions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setMaxNumActions = function(value) {
  jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional bool reversed = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.ListActionsRequest.prototype.getReversed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.litrpc.ListActionsRequest.prototype.setReversed = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool count_total = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.litrpc.ListActionsRequest.prototype.getCountTotal = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.litrpc.ListActionsRequest.prototype.setCountTotal = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bytes session_id = 9;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.ListActionsRequest.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes session_id = 9;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.litrpc.ListActionsRequest.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.ListActionsRequest.prototype.setSessionId = function(value) {
  jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional uint64 start_timestamp = 10;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getStartTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setStartTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 10, value);
};


/**
 * optional uint64 end_timestamp = 11;
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getEndTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/** @param {string} value */
proto.litrpc.ListActionsRequest.prototype.setEndTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 11, value);
};


/**
 * optional bytes group_id = 12;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.ListActionsRequest.prototype.getGroupId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes group_id = 12;
 * This is a type-conversion wrapper around `getGroupId()`
 * @return {string}
 */
proto.litrpc.ListActionsRequest.prototype.getGroupId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGroupId()));
};


/**
 * optional bytes group_id = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGroupId()`
 * @return {!Uint8Array}
 */
proto.litrpc.ListActionsRequest.prototype.getGroupId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGroupId()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.ListActionsRequest.prototype.setGroupId = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.ListActionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.litrpc.ListActionsResponse.repeatedFields_, null);
};
goog.inherits(proto.litrpc.ListActionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.ListActionsResponse.displayName = 'proto.litrpc.ListActionsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.litrpc.ListActionsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.ListActionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.ListActionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.ListActionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListActionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.litrpc.Action.toObject, includeInstance),
    lastIndexOffset: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    totalCount: jspb.Message.getFieldWithDefault(msg, 3, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.ListActionsResponse}
 */
proto.litrpc.ListActionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.ListActionsResponse;
  return proto.litrpc.ListActionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.ListActionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.ListActionsResponse}
 */
proto.litrpc.ListActionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.litrpc.Action;
      reader.readMessage(value,proto.litrpc.Action.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setLastIndexOffset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTotalCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.ListActionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.ListActionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.ListActionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.ListActionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.litrpc.Action.serializeBinaryToWriter
    );
  }
  f = message.getLastIndexOffset();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      2,
      f
    );
  }
  f = message.getTotalCount();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
};


/**
 * repeated Action actions = 1;
 * @return {!Array<!proto.litrpc.Action>}
 */
proto.litrpc.ListActionsResponse.prototype.getActionsList = function() {
  return /** @type{!Array<!proto.litrpc.Action>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.litrpc.Action, 1));
};


/** @param {!Array<!proto.litrpc.Action>} value */
proto.litrpc.ListActionsResponse.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.litrpc.Action=} opt_value
 * @param {number=} opt_index
 * @return {!proto.litrpc.Action}
 */
proto.litrpc.ListActionsResponse.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.litrpc.Action, opt_index);
};


proto.litrpc.ListActionsResponse.prototype.clearActionsList = function() {
  this.setActionsList([]);
};


/**
 * optional uint64 last_index_offset = 2;
 * @return {string}
 */
proto.litrpc.ListActionsResponse.prototype.getLastIndexOffset = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.litrpc.ListActionsResponse.prototype.setLastIndexOffset = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint64 total_count = 3;
 * @return {string}
 */
proto.litrpc.ListActionsResponse.prototype.getTotalCount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.litrpc.ListActionsResponse.prototype.setTotalCount = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.litrpc.Action = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.litrpc.Action, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.litrpc.Action.displayName = 'proto.litrpc.Action';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.litrpc.Action.prototype.toObject = function(opt_includeInstance) {
  return proto.litrpc.Action.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.litrpc.Action} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.Action.toObject = function(includeInstance, msg) {
  var f, obj = {
    actorName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    featureName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    trigger: jspb.Message.getFieldWithDefault(msg, 3, ""),
    intent: jspb.Message.getFieldWithDefault(msg, 4, ""),
    structuredJsonData: jspb.Message.getFieldWithDefault(msg, 5, ""),
    rpcMethod: jspb.Message.getFieldWithDefault(msg, 6, ""),
    rpcParamsJson: jspb.Message.getFieldWithDefault(msg, 7, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    state: jspb.Message.getFieldWithDefault(msg, 9, 0),
    errorReason: jspb.Message.getFieldWithDefault(msg, 10, ""),
    sessionId: msg.getSessionId_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.litrpc.Action}
 */
proto.litrpc.Action.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.litrpc.Action;
  return proto.litrpc.Action.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.litrpc.Action} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.litrpc.Action}
 */
proto.litrpc.Action.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setActorName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFeatureName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTrigger(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntent(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setStructuredJsonData(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRpcMethod(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setRpcParamsJson(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTimestamp(value);
      break;
    case 9:
      var value = /** @type {!proto.litrpc.ActionState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorReason(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.litrpc.Action.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.litrpc.Action.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.litrpc.Action} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.litrpc.Action.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActorName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFeatureName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTrigger();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIntent();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStructuredJsonData();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRpcMethod();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getRpcParamsJson();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      8,
      f
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getErrorReason();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getSessionId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
};


/**
 * optional string actor_name = 1;
 * @return {string}
 */
proto.litrpc.Action.prototype.getActorName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setActorName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string feature_name = 2;
 * @return {string}
 */
proto.litrpc.Action.prototype.getFeatureName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setFeatureName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string trigger = 3;
 * @return {string}
 */
proto.litrpc.Action.prototype.getTrigger = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setTrigger = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string intent = 4;
 * @return {string}
 */
proto.litrpc.Action.prototype.getIntent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setIntent = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string structured_json_data = 5;
 * @return {string}
 */
proto.litrpc.Action.prototype.getStructuredJsonData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setStructuredJsonData = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string rpc_method = 6;
 * @return {string}
 */
proto.litrpc.Action.prototype.getRpcMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setRpcMethod = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string rpc_params_json = 7;
 * @return {string}
 */
proto.litrpc.Action.prototype.getRpcParamsJson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setRpcParamsJson = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional uint64 timestamp = 8;
 * @return {string}
 */
proto.litrpc.Action.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional ActionState state = 9;
 * @return {!proto.litrpc.ActionState}
 */
proto.litrpc.Action.prototype.getState = function() {
  return /** @type {!proto.litrpc.ActionState} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {!proto.litrpc.ActionState} value */
proto.litrpc.Action.prototype.setState = function(value) {
  jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional string error_reason = 10;
 * @return {string}
 */
proto.litrpc.Action.prototype.getErrorReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.litrpc.Action.prototype.setErrorReason = function(value) {
  jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional bytes session_id = 11;
 * @return {!(string|Uint8Array)}
 */
proto.litrpc.Action.prototype.getSessionId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes session_id = 11;
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {string}
 */
proto.litrpc.Action.prototype.getSessionId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSessionId()));
};


/**
 * optional bytes session_id = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSessionId()`
 * @return {!Uint8Array}
 */
proto.litrpc.Action.prototype.getSessionId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSessionId()));
};


/** @param {!(string|Uint8Array)} value */
proto.litrpc.Action.prototype.setSessionId = function(value) {
  jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * @enum {number}
 */
proto.litrpc.ActionState = {
  STATE_UNKNOWN: 0,
  STATE_PENDING: 1,
  STATE_DONE: 2,
  STATE_ERROR: 3
};

goog.object.extend(exports, proto.litrpc);
