// Code generated by MockGen. DO NOT EDIT.
// Source: sidecar/interfaces.go

// Package sidecar is a generated GoMock package.
package sidecar

import (
	reflect "reflect"

	v2 "github.com/btcsuite/btcd/btcec/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddSidecar mocks base method.
func (m *MockStore) AddSidecar(sidecar *Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSidecar", sidecar)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSidecar indicates an expected call of AddSidecar.
func (mr *MockStoreMockRecorder) AddSidecar(sidecar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSidecar", reflect.TypeOf((*MockStore)(nil).AddSidecar), sidecar)
}

// Sidecar mocks base method.
func (m *MockStore) Sidecar(id [8]byte, offerSignPubKey *v2.PublicKey) (*Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sidecar", id, offerSignPubKey)
	ret0, _ := ret[0].(*Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sidecar indicates an expected call of Sidecar.
func (mr *MockStoreMockRecorder) Sidecar(id, offerSignPubKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sidecar", reflect.TypeOf((*MockStore)(nil).Sidecar), id, offerSignPubKey)
}

// Sidecars mocks base method.
func (m *MockStore) Sidecars() ([]*Ticket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sidecars")
	ret0, _ := ret[0].([]*Ticket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sidecars indicates an expected call of Sidecars.
func (mr *MockStoreMockRecorder) Sidecars() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sidecars", reflect.TypeOf((*MockStore)(nil).Sidecars))
}

// UpdateSidecar mocks base method.
func (m *MockStore) UpdateSidecar(sidecar *Ticket) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSidecar", sidecar)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSidecar indicates an expected call of UpdateSidecar.
func (mr *MockStoreMockRecorder) UpdateSidecar(sidecar interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSidecar", reflect.TypeOf((*MockStore)(nil).UpdateSidecar), sidecar)
}
